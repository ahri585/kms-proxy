# app.py
import os
from flask import Flask, jsonify, render_template, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_cors import CORS
import logging
from config import Config

# ──────────────────────────────
# 전역 객체 초기화
# ──────────────────────────────
db = SQLAlchemy()
migrate = Migrate()

# ──────────────────────────────
# Flask 애플리케이션 팩토리
# ──────────────────────────────
def create_app():
    # Vite dist 경로 설정
    dist_path = os.path.join(os.path.dirname(__file__), 'dist')
    
    app = Flask(
        __name__,
        static_folder=dist_path,
        static_url_path='/',
        template_folder='templates'
    )
    app.config.from_object(Config)
    
    # ──────────────────────────────
    # ✅ CORS 설정 (Vite + Flask 연동)
    # ──────────────────────────────
    CORS(
        app,
        supports_credentials=True,
        resources={
            r"/api/*": {
                "origins": ["http://localhost:5173", "http://localhost:5000", "https://lockument.duckdns.org"]
            },
            r"/upload/*": {
                "origins": ["http://localhost:5173", "http://localhost:5000", "https://lockument.duckdns.org"]
            },
        },
    )
    
    # ──────────────────────────────
    # DB 및 마이그레이션 초기화
    # ──────────────────────────────
    db.init_app(app)
    migrate.init_app(app, db)
    
    # ──────────────────────────────
    # 로거 설정
    # ──────────────────────────────
    gunicorn_logger = logging.getLogger("gunicorn.error")
    if gunicorn_logger.handlers:
        app.logger.handlers = gunicorn_logger.handlers
        app.logger.setLevel(logging.INFO)
    else:
        logging.basicConfig(
            level=logging.INFO,
            format="[%(asctime)s] %(levelname)s in %(module)s: %(message)s",
        )
        app.logger.setLevel(logging.INFO)
    app.logger.info("✅ Flask 초기화 완료")
    
    # ──────────────────────────────
    # Blueprint 등록
    # ──────────────────────────────
    from routes_crypto import crypto_bp
    from routes_auth import auth_bp
    app.register_blueprint(crypto_bp)
    app.register_blueprint(auth_bp)
    app.logger.info("✅ Blueprint 등록 완료 (crypto, auth)")
    
    # ──────────────────────────────
    # ✅ Vite 정적 파일 서빙
    # ──────────────────────────────
    @app.get("/<path:filename>")
    def serve_static(filename):
        """dist 폴더의 정적 파일 서빙 (JS, CSS, 이미지 등)"""
        file_path = os.path.join(dist_path, filename)
        if os.path.isfile(file_path):
            return send_from_directory(dist_path, filename)
        # 파일이 없으면 index.html 반환 (React Router 지원)
        return send_from_directory(dist_path, 'index.html')
    
    # ──────────────────────────────
    # ✅ SPA 라우팅 (React Router 지원)
    # ──────────────────────────────
    @app.get("/")
    def index():
        """Vite 빌드된 index.html 서빙"""
        app.logger.info("[GET] / → Vite index.html")
        return send_from_directory(dist_path, 'index.html')
    
    # ──────────────────────────────
    # 상태 체크용 엔드포인트
    # ──────────────────────────────
    @app.get("/api/health")
    def health_check():
        app.logger.info("[GET] /api/health → OK")
        return jsonify({"ok": True, "name": "Lockument Demo Portal"}), 200
    
    return app

# ──────────────────────────────
# Gunicorn 진입점
# ──────────────────────────────
app = create_app()
