# utils/audit_logger.py
from flask import request, current_app, g
from sqlalchemy import text
from app import db
import json, datetime as dt

def log_audit(tbl_name: str, op: str, new_data: dict, old_data: dict = None):
    """
    pii_audit.audit_logs에 JSON 기반 감사 로그 남기기
    - tbl_name: 관련 테이블 이름 (예: 'crypto_tokens')
    - op: 동작 ('ENCRYPT', 'DECRYPT', 'MASK' 등)
    - new_data: {"status": "SUCCESS", "token": "...", "meta": {...}}
    """

    try:
        # 사용자, IP, 브라우저 정보 수집
        user_id = getattr(g, "user_id", None) or "anonymous"
        ip = request.remote_addr or "unknown"
        ua = request.headers.get("User-Agent", "unknown")

        # 메타정보 JSON 병합
        meta = {
            "client_ip": ip,
            "user_agent": ua,
            "user_id": user_id,
            "timestamp": dt.datetime.utcnow().isoformat()
        }

        row_new = dict(new_data or {})
        row_new["meta"] = meta  # ✅ 메타정보 삽입

        sql = text("""
            INSERT INTO pii_audit.audit_logs (tbl_name, op, changed_at, row_old, row_new)
            VALUES (:tbl, :op, now(), :old, :new)
        """)

        db.session.execute(sql, {
            "tbl": tbl_name,
            "op": op,
            "old": json.dumps(old_data or {}, ensure_ascii=False),
            "new": json.dumps(row_new, ensure_ascii=False)
        })
        db.session.commit()

        current_app.logger.info(f"[AUDIT_LOG] {op} by user={user_id} ip={ip}")

    except Exception as e:
        db.session.rollback()
        current_app.logger.warning(f"[AUDIT_LOG_FAIL] {e}")

